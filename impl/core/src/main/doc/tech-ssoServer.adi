This chapter describes the different steps in the SSO Server functionality

It is built on top of the OpenId Connect / OAuth2 functionality.

When the client application needs authentication/authorization, it redirect to the the SSO Server instance.  This SSO Server instance needs to be created by the developer based on the template prepared by the Octopus Framework.

. Client (filter **userOctopus**) detects anonymous user and redirects to **/octopus** URL.
. The **be.atbash.ee.security.octopus.sso.servlet.OctopusServlet** determines

   . the rootURL for the callback (optionally through ClientCallbackHelper)
   . Stores the **OpenIdVariableClientData** in the session of the client
   . Assembles the URL for the SSO server for a login (with State and Nonce values)
   . redirect to this login URL.

. The login URL is <SSO.octopus.server>/octopus/sso/authenticate and passes first **oidcFilter**
. **be.atbash.ee.security.sso.server.filter.OIDCEndpointFilter** verifies the query parameters (existence, validity)
. Since it is also a AccessControlFilter, if passes the request to the loginURL of the AbstractUserFilter (_user_ by default or the additional one which is found)

. Redirect to the login
. Verification of authentication as normal and redirect to _saved_ request which is <SSO.octopus.server>/octopus/sso/authenticate.
. Passes again **oidcFilter** but now continues to the **AuthenticationServlet** since a UserPrincipal is present in the Subject.

. The _AuthenticationServlet_ creates and stores the tokens and performs the redirect to the callback URL provided by the client application.

   . OIDCTokenHelper creates the idToken claims
   . Depending on the flow, Access>Token and/or AuthorizationToken are created
   . SSOTokenStore keeps the token info for the login.

. The callback from the SSO server is handled by **SSOCallbackServlet** (and **SSOCallbackServletHandler**) the performed steps are

   . validate the callback parameters and use the _OpenIdVariableClientData_ which was stored at the HTTP Session.
   . When using Authorization code flow, exchange it for the Access code (call to SSO Server by **ExchangeForAccessCode**)
   . Retrieve the user info (the **OctopusSSOToken**) from the SSO server.
   . Perform a login based on this _OctopusSSOToken_

. The exchange of the _AuthenticationCode_ to the _AccessCode_ is performed on the client side by the class _ExchangeForAccessCode_. It creates an authenticated request and verifies the signing of the received JWT containing the AccessCode.
. On the server side, the **OIDCEndpointFilter** and the **TokenServlet** are handling the request for the AccessCode.

. The retrieval of the User (authentication info) is performed by the **OctopusUserRequestor**. it calls the user endpoint and converts to received info (JWT or plain JSON) to a **OctopusSSOToken**.
. This conversion is done by **OctopusSSOTokenConverter** with the help of a (customizable) **PrincipalUserInfoJSONProvider**
. On the server side, the **SSOAuthenticatingFilter** and **OctopusSSOEndpoint** (_/octopus/sso/user_) are handling the request.

Based on this **OctopusSSOToken**, a login is performed. The **SSOAuthenticationInfoBuilder** is responsible for creating the _UserPrincipal_ instance.

The Permissions are also supplied by the SSO Server and supplied through the **OctopusSSOEndpoint** class. There is an endpoint to return all named Permissions for an application and an endpoint for returning the permissions for a user for an application.

The **PermissionRequester** is retrieving this information on the client side.  The _StringPermissionLookup_ and _getAuthorizationInfo_ are the places where it is used (**SSOClientSecurityDataProvider**)