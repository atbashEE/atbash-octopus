This chapter describes the different steps in the SSO Server functionality

It is built on top of the OpenId Connect / OAuth2 functionality.

When the client application needs authentication/authorization, it redirect to the the SSO Server instance.  This SSO Server instance needs to be created by the developer based on the template prepared by the Octopus Framework.

. Client (filter **userOctopus**) detects anonymous user and redirects to **/octopus** URL.
. The **be.atbash.ee.security.octopus.sso.servlet.OctopusServlet** determines

   . the rootURL for the callback (optionally through ClientCallbackHelper)
   . Stores the **OpenIdVariableClientData** in the session of the client
   . Assembles the URL for the SSO server for a login (with State and Nonce values)
   . redirect to this login URL.

. The login URL is <SSO.octopus.server>/octopus/sso/authenticate and passes first **oidcFilter**
. **be.atbash.ee.security.sso.server.filter.OIDCEndpointFilter** verifies the query parameters (existence, validity)
. Since it is also a AccessControlFilter, if passes the request to the loginURL of the AbstractUserFilter (_user_ by default or the additional one which is found)

. Redirect to the login
. Verification of authentication as normal and redirect to _saved_ request which is <SSO.octopus.server>/octopus/sso/authenticate.
. Passes again **oidcFilter** but now continues to the **AuthenticationServlet** since a UserPrincipal is present in the Subject.

. The _AuthenticationServlet_ creates and stores the tokens and performs the redirect to the callback URL provided by the client application.

   . OIDCTokenHelper creates the idToken claims
   . Depending on the flow, Access>Token and/or AuthorizationToken are created
   . SSOTokenStore keeps the token info for the login.
