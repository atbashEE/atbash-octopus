=== Specify authorization info

Authorization info will be retrieved by the Octopus framework by calling implementations of _be.atbash.ee.security.octopus.authz.AuthorizationInfoProvider_.

The method _getAuthorizationInfo_ needs to supply the authorization info (permissions and roles) for the user.



// FIXME Basic documentation, more detail/explanation needed
=== Interceptors

    @RequiresPermissions

Can be used to protect the execution of an EJB method. User (subject) must have the permission before method is executed.

    String[] value()

Supply the permission(s) wildcard or named permission. See Permission chapter.

    Class<? extends NamedPermission>[] permission()

Supply the permission to check as class instance.

    Combined combined() default Combined.OR

When multiple permissions are supplied, must they all be satisfied or only one (the default)

    @RequiresRoles

Can be used to protect the execution of an EJB method. User (subject) must have the role before method is executed.

    String[] value()

Supply the role name(s). See Permission chapter.

==== within EJB

Create a ejb-jar.xml with the following content to protect all methods within all EJB beans

----
    <interceptors>
        <interceptor>
            <interceptor-class>be.atbash.ee.security.octopus.interceptor.OctopusInterceptor</interceptor-class>
        </interceptor>
    </interceptors>
    <assembly-descriptor>
        <interceptor-binding>
            <ejb-name>*</ejb-name>
            <interceptor-class>be.atbash.ee.security.octopus.interceptor.OctopusInterceptor</interceptor-class>
        </interceptor-binding>
    </assembly-descriptor>
----

The interceptor can also be added manually to the beans by putting the _@OctopusInterceptorBinding_ annotation.

==== within CDI

Activate the CDI interceptor to add interceptor to CDI beans by defining the config parameter

----
cdi.interceptor.enabled=true
----

Define the regex of _ApplicationScoped_ CDI beans which needs to have the _OctopusInterceptor_ within the file _/resources/octopusInterceptor.config_ or the file defined by the parameter _cdi.interceptor.configfile_

----
be.atbash.ee.security.octopus.jsf.*
----

Activate the Octopus interceptor within the _beans.xml file

----
    <interceptors>
        <class>be.atbash.ee.security.octopus.interceptor.OctopusInterceptor</class>
    </interceptors>
----

Another option is adding the _@OctopusInterceptorBinding_ annotation to those beans which needs to be verified. Beware that the activation of the interceptor within _beans.xml_ is also required in this case.

=== Voters

Voters for a certain permission or role can be created.

    @Inject
    @RequiresPermissions("order:read:*")
    private GenericPermissionVoter orderReadVoter;


or for a role

    @Inject
    @RequiresRoles("admin")
    private GenericRoleVoter adminRoleVoter;

Things you can do with a voter


    voter.checkPermission(AccessDecisionVoterContext, Set<SecurityViolation>);

Verifies the permission and add violations to the  Set<SecurityViolation> parameter. AccessDecisionVoterContext supplies context


    voter.verifyPermission();

returns true if the current user /subject has the required permission checked by the voter.


These voters can be created programmatically in those environments where no CDI inject is available.

    GenericPermissionVoter.createInstance(String);

or

    GenericRoleVoter.createInstance(ApplicationRole)


=== Custom voters

When the default checks on permissions or not enough. It can be that more complex logic is required or that multiple checks must be combined.

    @ApplicationScoped
    @Named
    public class CustomVoter extends AbstractGenericVoter {
    }

Typically the injection of voters is performed within these custom voters.

=== NamedPermissions

Using type safe enums for permissions names can be handy for small to medium sized applications. For large scale or Self-Contained Systems, it is probably no the best way.

The idea is that you specify the name of the permission using an Enum, something like.

----
public enum DemoPermission implements NamedPermission {
    BASIC_PERMISSION, ADVANCED_PERMISSION
}
----

These names (like _BASIC_PERMISSION_ can be used within JSF custom tags or the _namedFilter_ filter.

For EJB, you have the possibility to create a special annotation which allow you to define the authorization requirements.

----
@Target({ElementType.TYPE, ElementType.METHOD, ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
public @interface DemoPermissionCheck {
    DemoPermission[] value();
}
----

In order make this work, you need to provide Octopus with the information of these custom constructs by specifying the following configuration values within the _octopusConfig.properties_ file.

----
namedPermission.class=be.atbash.ee.security.octopus.jsf.security.DemoPermission
namedPermissionCheck.class=be.atbash.ee.security.octopus.jsf.security.DemoPermissionCheck
----

Now, EJB methods can be secured (authorized) by using

----
    @DemoPermissionCheck(DemoPermission.BASIC_PERMISSION)
    public String doBasicAction() {
        return "Basic Action Method called";
    }
----

=== System account

We can define a system account as principal (this in contract to the principal created for an end user using the application) for those situations where we have a process which is not started by an end user.
Examples for such a process are startup events of the applications, timers, etc...
System accounts can only be activated when no other user is logged on and needs to be done through the `octopusSecurityContext.activateSystemAccount` method. When another principal is active, a `SystemAccountActivationException` is thrown.

We can protect methods so that they can only be executed by System accounts by using the annotation `@SystemAccount`.

=== Custom tags

Custom tags are created to perform declarative authorization on JSF components. These are defined in the namespace

    xmlns:sec="http://www.atbash.be/secure/octopus"


<sec:securedComponent>

Defines if a certain JSF component can be viewed (is rendered) for the user/subject.

When defined within another JSF tag (without the for attribute) it controls the parent. With the for attribute one can define the JSF component on which it operates.

    permission

Supply the permission(s) wildcard or named permission. See Permission chapter.

    role

Supply the role name(s). See Permission chapter.

    voter

Supply the names of the custom voter(s)

Combination of the 3 above attributes is allowed

    not

Inverts the result of the check


    combined (true/false)

Do all checks need to be pass on the user/subject or is only 1 enough.

    for

Specifies the id of one (or more) JSF components for which the authorization check is performed.

<sec:securedListener>

Defines the possibility to execute a method when the authorization checks ofr te user are positive based on the supplied permission, role and/or voter.
The Java method can update the component to allow correct styling based on the permissions of the users.

When defined within another JSF tag (without the for attribute) it controls the parent. With the for attribute one can define the JSF component on which it operates.

    listener

Defines the EL expression of the method which needs to be executed. The EL expression must point to a Java method with a parameter of type UIComponent and has no return (void)

    permission

Supply the permission(s) wildcard or named permission. See Permission chapter.

    role

Supply the role name(s). See Permission chapter.

    voter

Supply the names of the custom voter(s)

Combination of the 3 above attributes is allowed

    not

Inverts the result of the check


    combined (true/false)

Do all checks need to be pass on the user/subject or is only 1 enough.

    for

Specifies the id of one (or more) JSF components for which the authorization check is performed.

<sec:securePage>

This is an alternative for the usage of the filter definition with the securedURLs.ini file. We can specify the authorization checks (using permission, role and voter) in order that the page is visible for the end user. If (s)he has no permission, the unauthorized page will be shown.

This tag can be placed anywhere on the page, but for optimal performance, it should be in the beginning of the page and within the <h:body> parent.

    permission

Supply the permission(s) wildcard or named permission. See Permission chapter.

    role

Supply the role name(s). See Permission chapter.

    voter

Supply the names of the custom voter(s)

Combination of the 3 above attributes is allowed

    not

Inverts the result of the check


    combined (true/false)

Do all checks need to be pass on the user/subject or is only 1 enough.

=== Filter (web based projects)

These filters can be specified in the file _WEB-INF/securedURLs.ini_ file to protect URLs with some authentication and authorization filters.

An example of such a file is

pages/urlCheck.xhtml = user, np[demo]
pages/** = user

The first part defines the URL or pattern and the second to filters which are applied (in the specified order). Make sure you define the authentication type filters (like _user_, see also ???) first and than any authorization type filter.
The file is processed for each request from top to bottom and the first match is taken. If no match is found, the _anon_ filter is applied to the request.

You can also add some definitions in a programmatic way. For this, define a CDI bean which implements the _ProgrammaticURLProtectionProvider_ interface.  By implementing the single method, we can specify the URLs as key and filter lsit as value of the Map (It is a LinkedHahsMap since the order of the entries is important)

If you have multiple _ProgrammaticURLProtectionProvider_ implementations, you can order them by applying the _@URLProtectionProviderOrder_ annotation on the class. It defines the order in which the instances are sorted (from low value to high value)

==== anon

Every one can access the page, no checks performed

==== authcBasic

type : Authenticating

Requires BASIC authentication.

==== user

type : Authenticating

Requires authenticated user (?? TODO real difference between authenticated and remembered)
When no authenticated user is available, a redirect to the loginURL is performed.

==== userRequired

type : Authorization

Requires authenticated user but no redirect to the login is performed but the unauthorized page is shown.

==== namedPermission / np

type : Authorization

Subject must have all the named permissions defined in the config.

==== namedPermission1 / np1

type : Authorization

Subject must have one of the named permissions defined in the config.

==== namedRole / nr

type : Authorization

Subject must have all the named roles defined in the config.

==== namedRole1 / nr1

type : Authorization

Subject must have one the named roles defined in the config.

==== rate

type :

Limit the number of requests for a certain path.

==== noSessionCreation

type :

It makes sure that no session will be created by the framework.

==== none

type : Authorization

No access allowed. Useful as last entry to disallow access to all but specified URLs.

==== mpUser (MicroProfile module)

type : Authenticating

Retrieves authentication information from the Bearer header formatted accordingly to the MP JWT Auth spec.

=== Java SE

Methods can be annotated with authorization checks, like @RequiresPermission, and authorization checks are performed by calling the method

----
    @RequiresPermissions("demo:offline:*")
    public String checkPermission() {
        MethodAuthorizationChecker.checkAuthorization();
----

Since we are running in plain Java SE, we have no interceptors available to perform these checks automatically.

