=== Filters

There are basically 3 types of filters within the system.

==== Authenticating filters

These filters extract information from the request and determine the principal based on that information. Examples are

. authcBasic -> BASIC authentication
. mpUser -> MicroProfile JWT auth token

When such a filter is available within the chain and the request doesn't define the required and correct information, an response with status 401 is returned.

All these filters extend from +be.atbash.ee.security.octopus.filter.authc.AuthenticatingFilter+

==== User filters

These filters are typically used to determine if the user is authenticated and if not, a redirect is performed to some kind of login form where the user can enter his credentials.
This form can be defined within the application (when using LDAP, SPI, ...) or externally when integrating with Keycloak, Google Oauth2, CAS, etc ...)

All these filters extends from +be.atbash.ee.security.octopus.authc.AbstractUserFilter+ which is defined within the JSF module. JSF is for the moment the only supported web framework where the user is able to interact with the application.

The predefined filters defined within Octopus are

. user -> redirect to /login.xhtml page or URL defined within config parameter _loginPage_
. userKeycloak -> redirect to Keycloak Login page (Keycloak integration)

==== Authorization filters

These filters determine is the user has the required permission, role, the customer voter allows access, ...

They assume that there is already an authenticated user / principal (because an anonymous user can't be assigned some permissions)

When no authenticated (or remembered) user / principal is detected, the response depends on the framework which handles the request and is encapsulated by the implementations of the +accessDeniedHandler+.

On  a JSF request, the default user filter is retrieved from the configuration (parameter _user.filter.default_) and a redirect to the _login page_ is performed (after the current request information is saved).
This allows filter chain definitions without the need to always specify the user filter name.

----
   /pages/hr/** = np[hr:read:*]
----

On a JAX-RS request, a response with status 401 is returned (as we have no possibility the ask for credentials of the current user).

