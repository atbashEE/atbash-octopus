=== Octopus Core Configuration

==== hashAlgorithmName

default : **(none)**

Name of the MessageDigest algorithm when you use hashed passwords.
examples are Md5 and Sha512.

==== saltLength

default : **0**

Number of bytes used when creating a salt for the hashing of passwords.
0 means that no salt is used.

==== hashEncoding

default : **HEX**

Defines how the hashed passwords are encoded (HEX or BASE64) before they
are compared to the supplied value which should be identically before
access is granted. The value specified in the configuration file is case
insensitive compared with the allowed values.

==== hashIterations

default : *1* or *1024*

Defines the number of iterations that are performed within the hashing algorithm.

The default value 1 is taken for the *'real'* hashing functions like SHA-256, 1024 is for the Key derivation functions like PBKDF2.

==== cacheManager.class

default : **be.atbash.ee.security.octopus.cache.MemoryConstrainedCacheManager**

The class responsible for holding/managing the cache of the
authentication and authorization data. The developer can supply a custom
implementation of be.atbash.ee.security.octopus.cache.AbstractCacheManager when the
cache needs different logic.

When the class has the javax.enterprise.context.ApplicationScoped annotation, it is instantiated as a CDI bean, otherwise a classic new is performed.

==== voter.suffix.permission

default : *PermissionVoter*

The suffix used to determine the CDI named bean which are created dynamically for each Named Permission. See VoterNameFactory.

==== voter.suffix.role

default : *RoleVoter*

The suffix used to determine the CDI named bean which are created dynamically for each Named Role. See VoterNameFactory.

==== voter.suffix.check

default : *AccessDecisionVoter*

The suffix used to determine the CDI named bean for the Custom check functionality. See VoterNameFactory and Custom check feature description.

==== authorization.dynamic

default : false

???

==== namedPermission.class

default : *(none)*

Defines the Enum class which enumerates all permissions. Within the demo example it is the class *be.atbash.ee.security.octopus.jsf.security.DemoPermission*.

==== namedPermissionCheck.class

default : *(none)*

Defines the annotation which can be used on method and class level to define the security requirements.

==== customCheck.class

default : *(none)*

Defines the annotation class which can be used to use custom declared Permissions, mostly useful in the case where you want to extend the named permission with some additional information.

==== namedRole.class

default : *(none)*

Defines the Enum class which enumerates all named roles. It is the role counterpart of the namedPermission.class configuration option.

==== namedRoleCheck.class

default : *(none)*

Defines the annotations which can be used on method and class level to define the security requirements.

==== cdi.interceptor.enabled

default : *false*

If set active, CDI beans will also receive the Octopus interceptor and thus permissions checks will be performed for all 'external' called methods. The fully qualified name of the intercepted beans will be matched with the name patterns defined within the file referenced by the _cdi.interceptor.configfile_ parameter.

==== cdi.interceptor.configfile

default : *classpath:octopusInterceptor.config*

File containing the patterns of the fully qualified class names of CDI beans which will be intercepted by the Octopus security interceptor.

=== Web Configuration

???

=== JSF Configuration

==== user.filter.default

default : *user*

When authorization filter encounters a non authenticated user, this filter is used to perform the redirect to the login page. The filter name point to a filter instance which implements +AbstractUserFilter+.

==== loginPage

default : */login.xhtml*

The JSF page which is shown when the system needs to ask for the user credentials (and no 3th party is defined for integration)

==== logoutPage

default : */*

The page which is shown when the is logged out. Make sure the page is anonymously accessible. By default, it is the page defined as welcome-file in the web.xml

==== allowPostAsSavedRequest

default : *true*

Is it allowed that during a POST to the server, the login page is shown.  After the redirect to the login page, it is possible that beans has lost their state and that post isn't functioning properly.

==== logoutFilter.postOnly

default : *false*

When using the Logout filter, is it only active for a POST request (to avoid issues with the browser prefetch)

==== single.logout

default : *false*

When the user has used some authentication mechanism which supports SSO (like Keycloak, OAuth2, ...) should a logout from the application mean also a logout from the SSO?

==== unauthorizedExceptionPage

default : */unauthorized.xhtml*

The page which is shown when the user has some missing permissions.

==== primefaces.mobile.exclusion

default : *false*

Exclude the wrapping of the PrimeFaces mobile renderers (for compatibility reasons, will be removed in some future version)

==== session.hijacking.level (JSF Only)

default : *ON*

Determines the Session Hijack Protection level. It uses the IP Address and User-Agent header information and checks if the sessionId could be 'stolen'.

The default level _ON_, checks both properties, _PARTIAL_ only the User-Agent header value and _OFF_ disables the protection.

=== OAuth2 configuration (common)

==== OAuth2.clientId

default : *(none)*

The value used for the clientId configuration value towards your OAuth2 provider.

As alternative, or when multiple providers are used, the name of the OAuth2 provider can be used as prefix like _google.OAuth2.clientId_

==== OAuth2.secretId

default : *(none)*

The value used for the secretId configuration value towards your OAuth2 provider.

As alternative, or when multiple providers are used, the name of the OAuth2 provider can be used as prefix like _google.OAuth2.clientId_

==== OAuth2.scopes

default : *(none)*

The additional scopes you want to use when the authentication is performed with the OAuth2 Provider.

As alternative, or when multiple providers are used, the name of the OAuth2 provider can be used as prefix like _google.OAuth2.clientId_

=== OAuth2 configuration (JSF)

==== OAuth2.provider.selectionPage

default : */login.xhtml*

The page which is shown to the user when multiple OAuth2 providers are found on the classpath so that the user can choose which provider he wants to take.

==== OAuth2.account.selection

default : *false*

Is the Google account selection page forced?

=== Keycloak configuration

==== keycloak.file

default : */keycloak.json*

Defines the location of the JSON file for configuration of the Octopus Keycloak integration.

=== Octopus MicroProfile JWT Configuration (Core)

==== mp.iss

default : *none*

The issues claim set within the JWT created by the _MPJWTTokenBuilder_ by default. When _MPRestClientProvider_ is used in combination with the Rest client, this value is required.

==== mp.aud

default : *none*

The audience claim set within the JWT created by the _MPJWTTokenBuilder_ by default. When _MPRestClientProvider_ is used in combination with the Rest client, this value is required.
And the expected audience value when a MP JWT token is validated.

==== mp.exp

default : *none*

The expiration setting used in the exp claim set within the JWT created by the _MPJWTTokenBuilder_. When _MPRestClientProvider_ is used in combination with the Rest client, this value is required.
The value has following format

<v><unit>

* v : A positive number
* unit : s (seconds), m (minutes) or h (hours)

Examples

* 5s -> JWT will have an expiration time of 5 seconds (so current time + 5 seconds)
* 20m -> JWT will have an expiration time of 20 minutes (so current time + 20 minutes)
* 1h -> JWT will have an expiration time of 1 hour (so current time + 1 hour)

=== Octopus MicroProfile JWT Configuration (Rest Client)

==== mp.key.id

default : *none*

The key id (looked up from the cryptographic keys read by the Key support) which will be used for the signing of the JWT.
We no key Id is specified, a key which has a private part is chosen (but there can only be one)

=== Octopus Rest client providers

==== octopus.rest.client.providers

default : *none*

List of fully qualified class names which will be added as provider to the generated Rest Clients. This is the equivalent of specifying them with the @RegisterProvider annotation (but now for all clients and not individual specified).
An alias is defined for a few Providers to make it easier to specify them

- _mp-authc_ -> Adds authentication and authorization information known within Octopus context to the header as MP JWT Auth token
- _keycloak-authc_ -> When available, adds the keycloak token as header.

